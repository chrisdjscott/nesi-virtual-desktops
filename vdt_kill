#!/bin/bash -e

# Kills named singularity instance.
# Author: Callum
# https://github.com/nesi/nesi-virtual-desktops

module purge > /dev/null  2>&1
module load Python Singularity/3.5.2 -q 
module unload XALT/NeSI -q

root="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"    # Location of this script 
VDT_LOCKFILES=${VDT_LOCKFILES:-"$root/lockfiles"} 


# Where files are saved in user home.
help() {
cat << EndOfHelp
[1mNAME[0m
        $(basename "$0") - Kill a virtual desktop.

[1mSYNOPSIS[0m
        $(basename "$0") [-h ] < display-port >

[1mDESCRIPTION[0m
        Kills Virtual Desktop.

[1mPARAMETERS[0m

    -h --help               This is help.

    -v --verbose               This is help.

[1mSEE ALSO[0m

EndOfHelp
}

parse_input() {
    while [[ $# -gt 1 ]];do
        case $1 in
        -h|--help)
                help "$0"
                shift
            ;;
        -v|--verbose)
            verbose="-v"
            #set -x
            shift
        ;;
        *)
                echo "Unknown option '${1}', -h for help."  >&2
                exit 1
            ;;
        esac
    done
    # # Parse flags + port
    # if [[ $# -gt 1 ]];then
    #     echo "Too many arguments '${1}', -h for help."  >&2
    # fi
    
    export VDT_INSTANCE_NAME="$1"
}

kill_vnc(){
    _lockfiles=($(find $VDT_LOCKFILES  -type f -name ${VDT_INSTANCE_NAME}.*  -user $(whoami)))
    vecho "Found lockfiles '${_lockfiles[*]}'"
    unset _found
    for session in  ${_lockfiles[@]}; do
        #echo $session
        #_display_port=$(echo "${session}" | sed -e 's/.*:\([0-9]*\).pid/\1/')
        #_hostname=$(echo "$session" | sed -e 's/.*\/\(.*\):.*/\1/')
        hostname="$(echo $session | cut -d "." -f2 | cut -d ":" -f1)"
        if [[ $hostname != $(hostname) ]];then 
            sshcmd="ssh ${verbose} ${hostname} module load Singularity/${EBVERSIONSINGULARITY};"
        else
            sshcmd=""
        fi
        $sshcmd singularity instance stop ${VDT_INSTANCE_NAME};
        #echo "${_display_port} ${_hostname}"
        #echo "${session}"
        exit $?
        _found="true"
    done

    if [[ -z "${_found}" ]];then
        echo "No instance named ${VDT_INSTANCE_NAME}";exit 1;
    fi
    exit 0
}
vecho () {
    # For verbose print.
    if [[ $verbose ]]; then
        echo "$LINENO:$*"
    fi
}

vex () {
    # For verbose exectute.
    if [[ $verbose ]]; then
        echo "$LINENO:$*"
    fi
    $@
}

main() {
    parse_input "$@"
    kill_vnc
}

main "$@"

