#!/bin/bash -e

# Command for starting 'virtual desktop'. A VNC server running inside a container with XFCE with pre-made config/cache.
# Author: Callum
# https://github.com/nesi/nesi-virtual-desktops


# TODO: Add filesystem shortcuts to desktop.

initialize(){
    export VDT_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    source "${VDT_ROOT}/utils/common.sh"
    minport=1024
    maxport=65536
    max_active=5
}


help() {
cat << EndOfHelp
[1mNAME[0m
        $(VDT_BASEname "$0") - Start a new virtual desktop

[1mSYNOPSIS[0m
        $(VDT_BASEname "$0") [-h -c -v -p -s] [-b template] [-r host] [-N name] [-t seconds] [-d port] <port>

[1mDESCRIPTION[0m
        Starts a VGL enabled virtual desktop.

[1mPARAMETERS[0m

    -h --help               This is help.

    -r --remote [host]      Start vdt on [host].

    -c --clean              Overwrite User desktop settings.

    -b --VDT_BASE [template]    Template (default=eng)

    -N --name [name]        Desktop name (default=VDT_BASE).

    -t --timeout [s]        Timeout server after [s] seconds.

    -s --secure             Connects though an encrypted websocket.

    -C --nohome             Don't mount home directory. Good for debugging.

    -v --verbose


Full documentation can be found at ${support_docs}

EndOfHelp
}

parse_input() {
    args=( "$@" ) # Save unshifted args for later.
    
    while true;do
        case $1 in
            -v|--verbose)
                export verbose="-v"
                #set -x
                shift
            ;;
            -c|--clean)
                clean="true"
                shift
            ;;
            -C|--nohome)
                nohome="-C"
                shift
            ;;
            -p|--persistent)
                warning "'-p' is depricated. See $support_docs for more details."
                #exit 1 
                shift
            ;;
            -r|--remote)
                remote="${2}"
                shift
                shift
            ;;
            -t|--timeout)
                timeout="timeout ${2} "
                shift
                shift
            ;;
            -b|--base)
                VDT_BASE="${2}"
                shift
                shift
            ;;
            -N|--name)
                _instance_name="${2}"
                shift
                shift
            ;;
            -d|--display)
                _display_port="${2}"
                #set -x
                shift
                shift
            ;;
            -s|--secure)
                secure="true"
                shift
            ;;
            -h|--help)
                help "$0"
                exit 0
                shift
            ;;
            *)  
                if [[ $# -eq 1 ]];then
                    if (($1 < $minport));then
                        error "Port number must be larger than $minport.";exit 1
                    elif (($1 > $maxport));then
                        error "Port number must be less than $maxport.";exit 1
                    else
                        VDT_SOCKET_PORT="$1";break
                    fi
                fi
                if [[ $# -eq 0 ]];then
                    echo "You must include a valid port number. '$(basename "$0") -h' for help.";exit 1
                fi
                echo "$@"
                echo "Unknown option '${1}', '$(basename "$0") -h' for help."  >&2
                help "$0"
                exit 1
            ;;
        esac
    done
    #if ls ${VDT_LOCKFILES}/*${remote:-$(hostname)}:${VDT_SOCKET_PORT} 1> /dev/null 2>&1;then echo "WARNING: Socket port '${VDT_SOCKET_PORT}' is in use on ${remote:-$(hostname)}, you may have to choose another.";fi    
    
    # Remove logs older than 2 days
    find ${VDT_HOME}/* -mtime +2 -exec rm {} \; 2>/dev/null || true

    # Any users of command with logs older than  note_time get message.
    note_time=160600
    if (( $(stat -c %X ${VDT_HOME}) < ${note_time} )); then 
        warning "'vdt' command may have changed significantly since you last used it. Please check ${support_docs} for more information."
        "$VDT_ROOT/vdt_clean"
        # error "You may not have more than ${max_active} active sessions. Close some with 'vdt kill' command and try again."
    fi

    # Throw error if more than max active sessions.
    if (($(find $VDT_LOCKFILES  -type f  -user "$(whoami)" 2>/dev/null | wc -w) > max_active)); then 
        error "You may not have more than ${max_active} active sessions. Close some with 'vdt kill' command and try again."
    fi

    # Create directory for logs, certificates etc
    mkdir -p "${VDT_HOME:="${HOME}/.vdt"}"

    # Select template.
    if [[ -z "${VDT_BASE}" ]];then VDT_BASE="default";fi

    if (ls ${VDT_TEMPLATES}/${VDT_BASE} > /dev/null); then
        debug "Using '${VDT_BASE}' as template."       
    else
        echo "Unknown template '${1}', valid options are '$(ls ${VDT_TEMPLATES})'.\n"
    fi
    
    # Get node from env if slurm id set.
    if [[ -n "$SLURM_JOB_ID" && -z "${remote}" ]]; then
        remote=$(echo $SLURM_NODELIST | sed -E 's/^([a-z]{3})\[+([0-9]{3}).*/\1\2/') 
        echo "Connection will be forwarded to $remote. Run 'unset SLURM_JOB_ID' if this isn't what you want."
        # Create and submit chaser job.
        sbatch --time 00:00:10 --dependency afterany:$SLURM_JOB_ID --job-name vdt_chaser_job --wrap "rm -f ${lockfile} >/dev/null 2>&1" >${VDT_LOGFILE} 2>&1
    fi

    debug "Destination is '${remote:-$(hostname)}', Current host '$(hostname)'"

    if [[ -n "$SLURM_JOB_NAME" ]];then
        if [[ -n "$_instance_name" ]];then
            echo "VDT name '$_instance_name' as specified by '-N' was overridden by Slurm job name '$SLURM_JOB_NAME'."
        fi
        VDT_INSTANCE_NAME="${SLURM_JOB_NAME}"
    else
        # Create name.
        VDT_INSTANCE_NAME=${_instance_name:-"${VDT_BASE}_${USER}"}
        VDT_INSTANCE_NAME=${VDT_INSTANCE_NAME//[^a-zA-Z0-9_]/}
        while true; do
            if ! ls "${VDT_LOCKFILES}"/*"${VDT_INSTANCE_NAME}"\..* 1> /dev/null 2>&1;then break;fi
            p2=$(($(echo ${VDT_INSTANCE_NAME} | grep -Eo '[0-9]+$' || echo 0)+1))
            p1="$(echo ${VDT_INSTANCE_NAME} | grep -Eo '.*_[^0-9]')"
            VDT_INSTANCE_NAME="${p1}_${p2}"   
        done  
    fi

    t1=$(find $VDT_LOCKFILES -type f -name *\.${remote:-$(hostname)}:* -user ${USER} 2>/dev/null | head -n1)
    if [[ -n $t1 ]];then
        warning "You already have a session running on ${remote:-$(hostname)}, attempting to start another may cause issues."
        if test_liveness "$t1" >/dev/null 2>&1 ;then
            error "Session exists"
            exit 1
        fi
    fi

    t2="$(find $VDT_LOCKFILES -type f -name *:${VDT_SOCKET_PORT} 2>/dev/null | head -n1)"
    if [[ -n $t2 ]]; then 
        warning "The port '${VDT_SOCKET_PORT}' appears to be in use, this may cause issues."
        if test_liveness "$t2" >/dev/null 2>&1 ;then
            error "Session exists."
            exit 1
        fi
    fi

    debug "starting vdt '$VDT_INSTANCE_NAME'"

    # Set logfiles dest
    export VDT_LOGFILE=${VDT_LOGFILE:="${VDT_HOME}/${VDT_INSTANCE_NAME}.${remote:-$(hostname)}:${VDT_SOCKET_PORT}.log"}
    touch "$VDT_LOGFILE" || echo "Warning: Cannot write to $VDT_LOGFILE." 
    debug "Logfile r\033[0KError: Could not find tunnel.\n" && printf "\r\033[0KTunnel Live.\n"
    # else
    
    # if [[ -z "$session_jobid" && -n "$SLURM_JOB_ID" ]]; then
    #     printf "'SLURM_JOB_ID' set. Connection will be forwarded to job $SLURM_JOB_ID.\n"
    #     export session_jobid="$SLURM_JOB_ID"
    # fi

    lockfile="${VDT_LOCKFILES}/${VDT_INSTANCE_NAME}.${remote:-$(hostname)}:${VDT_SOCKET_PORT}"
    debug "Lockfile is ${lockfile}"
}

launch(){
    if [[ -z "$verbose" ]];then
        env | grep VDT
    fi
    # If remote destination is set, and not self.
    if [[ -n $remote ]];then
        VDT_TUNNEL_HOST="$(hostname)"
    fi

    # Export all variables starting with 'VDT' to singularity.
    startcmd="export"
    for ev in $(compgen -A variable | grep ^VDT );do
        startcmd="$startcmd $ev=\"${!ev}\""
    done

    startcmd="${startcmd} && ${timeout}${VDT_ROOT}/utils/singularity_wrapper.sh"

    debug "PPID is $PPID"
    debug "$startcmd"

    echo "$!" > "${lockfile}" 

    case $(ps -o stat= -p $$) in
        *+*) debug "Running in foreground" ;;
        *) debug "Running in background" ;;
    esac

    if [[ -n $remote ]];then
        printf "Looking for tunnel to %s..." "$remote"
        ssh ${verbose} -A -o StrictHostKeyChecking=no -o ExitOnForwardFailure=yes ${remote} ${startcmd} #2>${VDT_LOGFILE}
        #assert_lennut $VDT_SOCKET_PORT || printf "\r\033[0KError: Could not find tunnel.\n" && printf "\r\033[0KTunnel Live.\n"
    else
        eval "$startcmd"
    fi

    # if [[ ! "${remote}" == "${HOSTNAME}" ]];then
    #     cmd="$cmd ssh -T ${verbose} ${remote} "
    # fi
    #cmd="$cmd source ${VDT_ROOT}/utils/common.sh && assert_pid"
    #$cmd
    #echo "PID is '${daemon_pid}'"
    # echo ""
    # echo "Instance name: '${VDT_INSTANCE_NAME}'"
    # echo "Logfile is '${VDT_LOGFILE}'"
    # echo "Connect with 'http://localhost:${VDT_SOCKET_PORT}'"
    exit $?
}

main() {
    initialize
    parse_input "$@"
    launch 
    return $?
}

cleanup() {
    turbo_kill $lockfile &
    return 1

}
cleanup_nice(){
    return 0
}

trap cleanup INT ERR SIGINT SIGTERM

main "$@" || cleanup && cleanup_nice