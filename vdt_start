#!/bin/bash -e

# Command for starting 'virtual desktop'. A VNC server running inside a container with XFCE with pre-made config/cache.
# Author: Callum
# https://github.com/nesi/nesi-virtual-desktops


# TODO: Add filesystem shortcuts to desktop.

initialize(){
    export VDT_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    source "${VDT_ROOT}/utils/common.sh"
    minport=1024
    maxport=65536
}


help() {
cat << EndOfHelp
[1mNAME[0m
        $(VDT_BASEname "$0") - Start a new virtual desktop

[1mSYNOPSIS[0m
        $(VDT_BASEname "$0") [-h -c -v -p -s] [-b template] [-r host] [-N name] [-t seconds] [-d port] <port>

[1mDESCRIPTION[0m
        Starts a VGL enabled virtual desktop.

[1mPARAMETERS[0m

    -h --help               This is help.

    -r --remote [host]      Start vdt on [host].

    -c --clean              Overwrite User desktop settings.

    -b --VDT_BASE [template]    Template (default=eng)

    -N --name [name]        Desktop name (default=VDT_BASE).

    -t --timeout [s]        Timeout server after [s] seconds.

    -s --secure             Connects though an encrypted websocket.

    -C --nohome             Don't mount home directory. Good for debugging.

    -v --verbose

EndOfHelp
}

parse_input() {
    args=( "$@" ) # Save unshifted args for later.
    
    while true;do
        case $1 in
            -v|--verbose)
                export verbose="-v"
                #set -x
                shift
            ;;
            -c|--clean)
                clean="true"
                shift
            ;;
            -C|--nohome)
                nohome="-C"
                shift
            ;;
            -p|--persistent)
                echo "'-p' is depricated. See $support_docs for more details."
                #exit 1 
                shift
            ;;
            -r|--remote)
                remote="${2}"
                shift
                shift
            ;;
            -t|--timeout)
                timeout="timeout ${2} "
                shift
                shift
            ;;
            -b|--base)
                VDT_BASE="${2}"
                shift
                shift
            ;;
            -N|--name)
                _instance_name="${2}"
                shift
                shift
            ;;
            -d|--display)
                _display_port="${2}"
                #set -x
                shift
                shift
            ;;
            -s|--secure)
                secure="true"
                shift
            ;;
            -h|--help)
                help "$0"
                exit 0
                shift
            ;;
            *)  
                if [[ $# -eq 1 ]];then
                    if (($1 < $minport));then
                        echo "Port number must be larger than $minport.";exit 1
                    elif (($1 > $maxport));then
                        echo "Port number must be less than $maxport.";exit 1
                    else
                        VDT_SOCKET_PORT="$1";break
                    fi
                fi
                if [[ $# -eq 0 ]];then
                    echo "You must include a valid port number. '$(basename "$0") -h' for help.";exit 1
                fi
                echo "$@"
                echo "Unknown option '${1}', '$(basename "$0") -h' for help."  >&2
                help "$0"
                exit 1
            ;;
        esac
    done
    #if ls ${VDT_LOCKFILES}/*${remote:-$(hostname)}:${VDT_SOCKET_PORT} 1> /dev/null 2>&1;then echo "WARNING: Socket port '${VDT_SOCKET_PORT}' is in use on ${remote:-$(hostname)}, you may have to choose another.";fi    
    

    # Remove old logs
    oldlogs
    # Create directory for logs, certificates etc
    mkdir -p "${VDT_HOME:="${HOME}/.vdt"}"

    if [[ -n $(find $VDT_LOCKFILES -type f -name *\.${remote:-$(hostname)}:* -user ${USER}) ]] ;then 
        warning "You already have a session running on ${remote:-$(hostname)}, attempting to start another may cause issues."
        #exit 1
    fi
    if [[ -n $(find $VDT_LOCKFILES -type f -name *:${VDT_SOCKET_PORT} 2>&1) ]] ;then 
        warning "The port '${VDT_SOCKET_PORT}' appears to be in use, this may cause issues."
        #exit 1
    fi

    # Select template.
    if [[ -z "${VDT_BASE}" ]];then VDT_BASE="default";fi

    if (ls ${VDT_TEMPLATES}/${VDT_BASE} > /dev/null); then
        debug "Using '${VDT_BASE}' as template."       
    else
        echo "Unknown template '${1}', valid options are '$(ls ${VDT_TEMPLATES})'.\n"
    fi
    
    # Get node from env if slurm id set.
    if [[ -n "$SLURM_JOB_ID" && -z "${remote}" ]]; then
        remote=$(echo $SLURM_NODELIST | sed -E 's/^([a-z]{3})\[+([0-9]{3}).*/\1\2/') 
        echo "Connection will be forwarded to $remote. Run 'unset SLURM_JOB_ID' if this isn't what you want."
        # Create and submit chaser job.
        sbatch --time 00:00:10 --dependency afterany:$SLURM_JOB_ID --job-name vdt_chaser_job --wrap "rm -f ${lockfile} >/dev/null 2>&1" >${VDT_LOGFILE} 2>&1
    fi
    debug "Destination is '${remote:-$(hostname)}', Current host '$(hostname)'"

    if [[ -n "$SLURM_JOB_NAME" ]];then
        if [[ -n "$_instance_name" ]];then
            echo "VDT name '$_instance_name' as specified by '-N' was overridden by Slurm job name '$SLURM_JOB_NAME'."
        fi
        VDT_INSTANCE_NAME="${SLURM_JOB_NAME}"
    else
        # Create name.
        VDT_INSTANCE_NAME=${_instance_name:-"${VDT_BASE}_${USER}"}
        VDT_INSTANCE_NAME=${VDT_INSTANCE_NAME//[^a-zA-Z0-9_]/}
        while true; do
            if ! ls "${VDT_LOCKFILES}"/*"${VDT_INSTANCE_NAME}"\..* 1> /dev/null 2>&1;then break;fi
            p2=$(($(echo ${VDT_INSTANCE_NAME} | grep -Eo '[0-9]+$' || echo 0)+1))
            p1="$(echo ${VDT_INSTANCE_NAME} | grep -Eo '.*_[^0-9]')"
            VDT_INSTANCE_NAME="${p1}_${p2}"   
        done  
    fi
    echo "starting vdt '$VDT_INSTANCE_NAME'"

    # Set logfiles dest
    export VDT_LOGFILE=${VDT_LOGFILE:="${VDT_HOME}/${VDT_INSTANCE_NAME}.${remote:-$(hostname)}:${VDT_SOCKET_PORT}.log"}
    touch "$VDT_LOGFILE" || echo "Warning: Cannot write to $VDT_LOGFILE." 
    debug "Logfile is ${VDT_LOGFILE}"

    # if [[ -z "$session_jobid" && -n "$SLURM_JOB_ID" ]]; then
    #     printf "'SLURM_JOB_ID' set. Connection will be forwarded to job $SLURM_JOB_ID.\n"
    #     export session_jobid="$SLURM_JOB_ID"
    # fi

    lockfile="${VDT_LOCKFILES}/${VDT_INSTANCE_NAME}.${remote:-$(hostname)}:${VDT_SOCKET_PORT}"
    debug "Lockfile is ${lockfile}"
}

launch(){

    # If remote destination is set, and not self.
    if [[ -n $remote ]];then
        VDT_TUNNEL_HOST="$(hostname)"
    fi

    # Export all variables starting with 'VDT' to singularity.
    startcmd="export"
    for ev in $(compgen -A variable | grep ^VDT );do
        startcmd="$startcmd $ev=\"${!ev}\""
    done
    # if [[ -n ${verbose} ]];then
    #     startcmd="$startcmd verbose=-v"
    # fi
    startcmd="${startcmd} && ${timeout}${VDT_ROOT}/utils/singularity_wrapper.sh"
    # if [[ -z $persistent ]];then
    #     #echo "Starting ephemeral desktop on $msg"
    #     printf "\r\033[0KInitialize Successful\n" 
    #     startcmd=''${cmd1}' "'$startcmd'"'
    #     debug "$startcmd"
    #     eval "$startcmd"
    # else 
    debug "PPID is $PPID"
    #startcmd='nohup '${cmd1}' "'$startcmd'" >> '$VDT_LOGFILE' 2>&1 &'
    debug "$startcmd"
    #eval "$startcmd"
    echo "$!" > "${lockfile}" 
    #printf "\r\033[0Kinitialize Successful\n" 

    if [[ -n $remote ]];then
        printf "Looking for tunnel to %s..." "$remote"
        ssh ${verbose} -A -o StrictHostKeyChecking=no -o ExitOnForwardFailure=yes ${remote} ${startcmd} #2>${VDT_LOGFILE}

        #assert_lennut $VDT_SOCKET_PORT || printf "\r\033[0KError: Could not find tunnel.\n" && printf "\r\033[0KTunnel Live.\n"
    else
        eval "$startcmd"
    fi

    # if [[ ! "${remote}" == "${HOSTNAME}" ]];then
    #     cmd="$cmd ssh -T ${verbose} ${remote} "
    # fi
    #cmd="$cmd source ${VDT_ROOT}/utils/common.sh && assert_pid"
    #$cmd
    #echo "PID is '${daemon_pid}'"
    # echo ""
    # echo "Instance name: '${VDT_INSTANCE_NAME}'"
    # echo "Logfile is '${VDT_LOGFILE}'"
    # echo "Connect with 'http://localhost:${VDT_SOCKET_PORT}'"
    exit $?
    # fi
}

# assert_per(){
#     # If was -p. This is the end of the script.
#     if [[ -n $persistent ]];then
#         assert_lennut
#         assert_vnc
#         assert_pid
#         #echo "PID is '${daemon_pid}'"
#         echo ""
#         echo "Instance name: '${VDT_INSTANCE_NAME}'"
#         echo "Logfile is '${VDT_LOGFILE}'"
#         echo "Connect with 'http://localhost:${VDT_SOCKET_PORT}'"
#         exit 0
#     fi
# }

# assert_pid(){
#     printf "Checking proceesses are running on %s..." "${remote:-$(hostname)}"
#     if [[ -n ${remote} ]];then
#         cmd="ssh ${verbose} ${remote} "
#     fi
#     cmd="${cmd}source ${VDT_ROOT}/utils/common.sh && assert_pid"
#     if $cmd > debug 2>&1;then 
#         printf "\r\033[0KFound all proceesses.\n"
#     else
#         printf "\r\033[0KError: VDT did not launch properly on node.\n" 
#         exit 1
#     fi
# }
assert_vnc(){

    return 0

}


main() {
    initialize
    parse_input "$@"
    launch 
    return $?
}

# construct_ssh() {
#     # If jobid is specified, get host of jobid.
#     if [[ "$session_jobid" ]];then
#         while true;do
#             sqout=$(squeue -h -u "$USER" -j "$session_jobid" -O "State,NodeList")
#             debug $sqout
#             jobstate=$(echo $sqout | awk '{print $1}')
#             echo $jobstate
#             session_hostname=$(echo $sqout | awk '{print $2}')
#             if [[ $jobstate == "RUNNING" ]]; then
#                 iprint "Connection will be forwarded to $session_hostname\n"
#                 break
#                 elif [[ $jobstate == "PENDING" ]]; then
#                 iprint "'$session_jobid' is pending. Waiting..."
#                 sleep 10
#             else
#                 iprint "'$session_jobid' is not a valid slurm session to connect to.\n"
#                 unset session_jobid session_hostname
#                 exit 1
#             fi
#         done
#     fi
    
#     # Case 0 - Already on correct node.
#     if [[ "$session_hostname" = "$HOSTNAME" ]];then
#         "$@"
#         # Case 1 - No node specified. (Do nothing)
#         elif [[ ! "$session_jobid" ]] && [[ ! "$session_hostname" ]];then
#         "$@"
#         # Case 2 - Node specified, forwarding port specified. (Forward port to node)
#         elif [[ "$INBOUND_PORT" ]]; then
#             ssh -L "${INBOUND_PORT}:localhost:${INBOUND_PORT}" "${session_hostname}" "$@"
#         # Case 3 - Node specified, forwarding port not specified. (Run command on node)
#         elif [[ ! "$INBOUND_PORT" ]]; then
#             ssh "${session_hostname}" "$@"
#     else
#         echo "Something went wrong, couldn't construct SSH tunnel"
#         return 1
#     fi
# }

cleanup() {
    #vncserver
    #singularity $verbose exec "$img_path" "vncserver -kill ":$VDT_DISPLAY_PORT"" 1> ${VDT_LOGFILE} 2>&1 || true
    #rm -f $verbose /tmp/.X11-unix/.X*
    #rm -f $verbose "$HOME"/.vnc/*"${VDT_INSTANCE_NAME}".pid
    echo "Trapped $?"
    #if [[ -n "${VDT_LOGFILE}" ]]; then rm -f $verbose "${VDT_LOGFILE}";fi
    #ls "${lockfile}"

    # if [[ -n "${lockfile}" ]]; then rm -f $verbose "${lockfile}";fi
    # # Unset all VDT variables.
    # for ev in $(compgen -A variable | grep ^VDT );do
    #     unset "$ev"
    # done
    
    # rm -fvr "/tmp/.X$display_port-lock"
    # rm -fvr "/tmp/.ICE$display_port-lock"

    # while [[ "$(fuser $VDT_SOCKET_PORT/tcp 2>/dev/null | wc -w)" -gt 0 ]];do
    #     kill -9 "$(fuser $VDT_SOCKET_PORT/tcp 2>/dev/null | awk '{ print $1 }')"
    # done

    # pkill --signal 9 -P $$ > /dev/null 2>&1 

    return 1

}
cleanup_nice(){
    return 0
}

trap cleanup INT ERR SIGINT SIGTERM

main "$@" || cleanup && cleanup_nice