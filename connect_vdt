#!/bin/bash -e

# Provides simple inteface for setting up VNC sessions, connecting, hosting noVNC etc etc.
# Author: Callum
# https://github.com/nesi/nesi-virtual-desktops


# TODO: Creates a web socket connecting port to VNC server

module purge > /dev/null  2>&1
module load Python Singularity/3.5.2 -q 
module unload XALT/NeSI -q


#Location of this script
root="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
websockify_home="$root/websockify_modified"
novnc_home="$root/noVNC_modified"


# Where files are saved in user home.

help() {
cat << EndOfHelp
[1m$CWD[0m

[1mSYNOPSIS[0m
        $CWD [-h -v] < display-port > < socket-port >

[1mDESCRIPTION[0m
        Creates a websocket connecting the VNC server.

[1mPARAMETERS[0m

    -h --help               This is help.

    -v --verbose

EndOfHelp
}

cleanup() {
    pkill --signal 15 -P $$ > /dev/null 2>&1
    return 0
    # while [[ "$(fuser $1/tcp 2>/dev/null | wc -w)" -gt 0 ]];do
    #     kill -9 "$(fuser $1/tcp 2>/dev/null | awk '{ print $1 }')"
    # done
}

parse_input() {
    if [[ $# -lt 2 ]];then
        if [[ $1 == "-h"  ]] || [[ $1 == "--help" ]];then
            help "$0"
            exit 0
        fi
        echo "Not enough arguments."  >&2
        help "$0"
        exit 1
    fi
    # Parse flags + port
    while [[ $# -gt 2 ]];do
        case $1 in
            -v|--verbose)
                verbose="true"
                v="-v"
                #set -x
                shift
            ;;
            -h|--help)
                help "$0"
                shift
            ;;
            *)
                echo "Unknown option '${1}', -h for help."  >&2
                exit 1
            ;;
        esac
    done
    display_port="$1"
    socket_port="$2"
}

connect_vnc(){

    #SOCKET_PORT=$(echo $SELECTED_INST | cut -d'_' -f2)
    #echo $socket_port
    #chmod 0700 -R "$HOME"/.cache "$HOME"/.xfce4 "$HOME"/.config "$HOME"/.fontconfig "$HOME"/.gnupg "$HOME"/.xfce4 > /dev/null 2>&1 || true
    #chmod 0600 -R "$HOME"/.ICEauthority "$HOME"/.Xauthority "$HOME"/.singularity > /dev/null 2>&1 || true

    #echo $socket_port
    # Might be better way to do this. Socket made outside of main container.
    #echo     "${websockify_home}/run" ${v} --web "${novnc_home}" "${INBOUND_PORT}" "localhost:${socket_port}"
    export SOCKET_PORT=$socket_port
    #echo "${websockify_home}/run" ${v} --web "${novnc_home}" "${socket_port}" "localhost:$((display_port+5900))"
    "${websockify_home}/run" ${v} --web "${novnc_home}" "${socket_port}" "localhost:$((display_port+5900))" || > /dev/null
    #singularity ${v} exec --cleanenv "$(readlink -f "$ROOT/$DESKTOP/image")" /opt/websockify/run --web /opt/noVNC/ $INBOUND_PORT localhost:$SOCKET_PORT
}
main() {
    parse_input "$@"
    connect_vnc
    return 0
}
trap cleanup INT

main "$@"

