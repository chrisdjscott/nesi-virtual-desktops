#!/bin/bash -e

# Provides simple inteface for setting up VNC sessions, connecting, hosting noVNC etc etc.
# Author: Callum
# https://github.com/nesi/nesi-virtual-desktops


# TODO: Creates a web socket connecting port to VNC server

module purge > /dev/null  2>&1
module load Python Singularity/3.5.2 -q 
module unload XALT/NeSI -q


#Location of this script
root="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"


# Where files are saved in user home.

help() {
cat << EndOfHelp
[1mNAME[0m
        $(basename "$0") - Connect to a virtual desktop.

[1mSYNOPSIS[0m
        $(basename "$0") [-h -v] -d [ port ] < instance-name > < socket-port >

[1mDESCRIPTION[0m
        Creates a websocket connecting the VNC server.

[1mPARAMETERS[0m

    -d --display [ port ]   Display port;

    -h --help               This is help.

    -s --secure             Use WSS websocket.

    -v --verbose

EndOfHelp
}

cleanup() {
    pkill --signal 15 -P $$ > /dev/null 2>&1
    return 0
    # while [[ "$(fuser $1/tcp 2>/dev/null | wc -w)" -gt 0 ]];do
    #     kill -9 "$(fuser $1/tcp 2>/dev/null | awk '{ print $1 }')"
    # done
}

parse_input() {
    if [[ $# -lt 2 ]];then
        if [[ $1 == "-h"  ]] || [[ $1 == "--help" ]];then
            help "$0"
            exit 0
        fi
        echo "Not enough arguments."  >&2
        help "$0"
        exit 1
    fi
    # Parse flags + port
    pos_args=2
    # if [ -z "${VDT_DISPLAY_PORT}" ]; then pos_args=$((pos_args-1));fi
    # if [ -z "${VDT_SOCKET_PORT}" ]; then pos_args=$((pos_args-1));fi

    while [[ $# -gt 2 ]];do
        case $1 in
            -v|--verbose)
                VERBOSE="true"
                v="-v"
                #set -x
                shift
            ;;
            -d|--display)
                export VDT_DISPLAY_PORT="${2}"
                v="-v"
                #set -x
                shift
                shift
            ;;
            -s|--secure)
                secure="true"
                shift
            ;;
            -h|--help)
                help "$0"
                shift
            ;;
            *)
                echo "Unknown option '${1}', -h for help."  >&2
                exit 1
            ;;
        esac
    done
    export VDT_INSTANCE_NAME="$1"
    export VDT_SOCKET_PORT="$2"

    if [[ -z ${VDT_DISPLAY_PORT} ]];then export VDT_DISPLAY_PORT=$(shuf -i 1100-2000 -n 1);fi

    # if  [[ $# -gt 1 ]]; then
    #     export VDT_DISPLAY_PORT="$1"
    #     export VDT_SOCKET_PORT="$2"
    # elif [[ $# -gt 0 ]] && [[ "$VDT_SOCKET_PORT" ]]; then
    #     export VDT_DISPLAY_PORT="$1"
    # else
    #     export VDT_SOCKET_PORT="$1"
    # fi
}

connect_vnc(){
    if [[ "$secure" ]];then
        # If environment setup for desktop flavor.
        echo "Generating security certificate."
        if [[ ! -f "${VDT_HOME}/self.pem" ]];then
            openssl req -new -x509 -days 365 -nodes -subj "/C=NZ/ST=Wellington/L=Wellington/O=NeSI/CN=$(hostname)" -out "${VDT_HOME}/self.pem" -keyout "${VDT_HOME}/self.pem"
        fi    
        cmd3="$cmd3 --cert=${VDT_HOME}/self.pem"
    fi
    #SOCKET_PORT=$(echo $SELECTED_INST | cut -d'_' -f2)
    #echo $socket_port
    #chmod 0700 -R "$HOME"/.cache "$HOME"/.xfce4 "$HOME"/.config "$HOME"/.fontconfig "$HOME"/.gnupg "$HOME"/.xfce4 > /dev/null 2>&1 || true
    #chmod 0600 -R "$HOME"/.ICEauthority "$HOME"/.Xauthority "$HOME"/.singularity > /dev/null 2>&1 || true

    #echo $socket_port
    # Might be better way to do this. Socket made outside of main container.
    #echo "${websockify_home}/run" ${v} --web "${novnc_home}" "${INBOUND_PORT}" "localhost:${socket_port}"

    vex singularity ${cmd1} run  ${cmd2} --cleanenv --app startvdt instance://${VDT_INSTANCE_NAME} ${cmd3} :${VDT_DISPLAY_PORT}
    vex singularity ${cmd1} run --cleanenv --app connectvdt instance://${VDT_INSTANCE_NAME} localhost:${VDT_SOCKET_PORT} :$(($VDT_DISPLAY_PORT + 5900))
}
vex () {
    if [[ $VERBOSE ]]; then echo "$@";fi
    "$@"
}
main() {
    parse_input "$@"
    connect_vnc
    return 0
}
trap cleanup INT

main "$@"

