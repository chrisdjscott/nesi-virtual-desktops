#!/bin/bash -e

# Lists named singularity instance.
# Author: Callum
# https://github.com/nesi/nesi-virtual-desktops

initialize(){
    export VDT_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    source "${VDT_ROOT}/utils/common.sh"
    _uniq_hosts=( "$(hostname)" )
    declare -A _lockfile_list
}

# Where files are saved in user home.
help() {
cat << EndOfHelp
[1mNAME[0m
        $(basename "$0") - List virtual desktops.

[1mSYNOPSIS[0m
        $(basename "$0") [-h -n -v ] [-r hostname] < display-port >

[1mDESCRIPTION[0m
        Lists VNC sessions

[1mPARAMETERS[0m

    -r --remote             Search specifically on a host.

    -n --noheader           Print without header.

    -h --help               This is help.

    -w --wait               Wait for checks from all nodes before printing.

    -v --verbose            Display more information.

EndOfHelp
}

parse_input() {
    while [[ $# -gt 0 ]];do
        case $1 in
            -n|--noheader)
                noheader="true"
                shift
            ;;
            -r|--remote)
                _uniq_hosts+=("$2")
                shift
                shift
            ;;
            -h|--help)
                help "$0"
                exit 0
                shift
            ;;
            -w|--wait)
                dowait="true"
                exit 0
                shift
            ;;
            -v|--verbose)
                export verbose="-v"
                shift
            ;;
            *)
                echo "$@"
                echo "Unknown option '${1}', -h for help."  >&2
                help "$0"
                exit 1
            ;;
        esac
    done
}

list_vnc(){
    
    #$echo $vnc_pid_root
    #if [["$verbose"]]; then echo "Using "
    readarray -t _lockfiles < <(find $VDT_LOCKFILES  -type f  -user "$(whoami)")
    debug "Found lockfiles: $(echo ${_lockfiles[*]}  | tr " " "\n  ")" #> debug
    #vnc_list=( $(ls "${vnc_pid_root:="${HOME}/.vnc"}"/*.pid 2> /dev/null || true) )
    #echo "${vnc_list[@]}"

    if [[ ! "$noheader" ]]; then printf "%27s %-20s %-22s %-18s %-27s\n"  "Name" " PID" "    Host" " Port" " Link" ;fi
    _linecount=0
    debug "${#_lockfiles[@]} lockfiles"
    printf "Searching...\r" 
    for lockfile in  "${_lockfiles[@]}" ; do
        async_bit &
        background_pid+=( $! )   
        _linecount+=1
    done

    # wait for all pids
    for pid in ${background_pid[*]}; do
        wait "${pid}"
    done

    if [[ $_linecount -lt 1 ]]; then echo "No sessions found";exit 1;fi
}
async_bit(){
    read_lockfile "${lockfile}"
        #cmd="assert_lennut $_port &&"

        #printf "%27s %-20s %-22s %-18s %-27s\n" "$_name" " $_pid" "$_host" " $_port" "http://localhost:$_port" ; } 
        
        #rm ${verbose} ${lockfile}
        _test(){
            set -e
            if [[ ! "${_host}" == "${HOSTNAME}" ]];then
                assert_lennut "${lockfile}"
                ssh ${verbose} ${_host} "source ${VDT_ROOT}/utils/common.sh && assert_pid 3 2" >${VDT_LOGFILE} 2>&1
            else
                assert_pid  3 2 >${VDT_LOGFILE} 2>&1
            fi
        }
    _test || rm ${verbose} ${lockfile} && printf "%27s %-20s %-22s %-18s %-27s\n" "$_name" " $_pid" "$_host" " $_port" "http://localhost:$_port"
    return $?
}

main() {
    parse_input "$@"
    initialize
    list_vnc "$@"
}

main "$@"

