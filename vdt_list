#!/bin/bash

# Lists named singularity instance.
# Author: Callum
# https://github.com/nesi/nesi-virtual-desktops


initialize(){
    export VDT_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    source "${VDT_ROOT}/utils/common.sh"
    _uniq_hosts=( "$(hostname)" )
    declare -A _lockfile_list
}

# Where files are saved in user home.
help() {
cat << EndOfHelp
[1mNAME[0m
        $(basename "$0") - List virtual desktops.

[1mSYNOPSIS[0m
        $(basename "$0") [-h -n -v ] [-r hostname] < display-port >

[1mDESCRIPTION[0m
        Lists VNC sessions

[1mPARAMETERS[0m

    -r --remote             Search specifically on a host.

    -n --noheader           Print without header.

    -h --help               This is help.

    -w --wait               Wait for checks from all nodes before printing.

    -v --verbose            Display more information.

EndOfHelp
}

parse_input() {
    while [[ $# -gt 0 ]];do
        case $1 in
            -n|--noheader)
                noheader="true"
                shift
            ;;
            -r|--remote)
                _uniq_hosts+=("$2")
                shift
                shift
            ;;
            -h|--help)
                help "$0"
                exit 0
                shift
            ;;
            -w|--wait)
                dowait="true"
                exit 0
                shift
            ;;
            -v|--verbose)
                export verbose="-v"
                shift
            ;;
            *)
                echo "$@"
                echo "Unknown option '${1}', -h for help."  >&2
                help "$0"
                exit 1
            ;;
        esac
    done
}

list_vnc(){
    
    #$echo $vnc_pid_root
    #if [["$verbose"]]; then echo "Using "
    readarray -t _lockfiles < <(find $VDT_LOCKFILES  -type f  -user "$(whoami)")
    vecho "Found lockfiles '${_lockfiles[*]}'"

    #vnc_list=( $(ls "${vnc_pid_root:="${HOME}/.vnc"}"/*.pid 2> /dev/null || true) )
    #echo "${vnc_list[@]}"

    if [[ ! "$noheader" ]]; then printf "%27s %-20s %-18s %-40s\n"  "Name" " PID" "    Host" " Port" ;fi
        _linecount=1
    for session in  "${_lockfiles[@]}" ; do
        _filename="$(basename $session)"
        _name="$(echo "$_filename" | cut -d "." -f1)"
        _host="$(echo "$session" | cut -d "." -f2 | cut -d ":" -f1)"
        _port="$(echo "$session" | cut -d ":" -f2)"
        _pid="$(cat $session)"
        _uniq_hosts+=( $_host )
        _lockfile_list[$_name]="$_name $_host $_port $_pid"        
        _linecount=$((i+=_linecount))
    done

    # # Remove duplicates
    # mapfile -t _uniq_hosts< <(printf "%s\n" "${_uniq_hosts[@]}" | sort -u | tr '\n' ' ')
    # vecho "Unique hosts '${_uniq_hosts[*]}'"

    # #singularity instance list | tail -n +2 |awk -v host="$(hostname)" '{printf "%12s %12s %12s %20s\n", $1, $2, host, $3}'
    # background_pid=()
    # # Check in background
    for lockfile in "${_lockfile_list[@]}" ; do
        read -ra lockfile_array <<< "$lockfile"
        echo "$_lockfile_list"
        check_on_host "${lockfile_array[@]}" & #|| find ${VDT_LOCKFILES}/*.${host}* -user ${USER} -exec rm -v {} \;  & 
        background_pid+=( $! )   
    done

    # wait for all pids
    for pid in ${background_pid[*]}; do
        wait "${pid}"
    done
    
    #printf "${_intances[@]}"
    exit 0
}

check_on_host(){
   

    #ssh ${remote} "${VDT_ROOT}/utils/check_pid.sh" >> $VDT_LOGFILE 2>&1;
    printf "%27s %-20s %-18s %-40s\n"  "$1" " $2" "    $3" " $4"

    return 0
#     if [[ -z "${1// }" ]];then
#         return
#     fi
#     if [[ "${1}" != "$(hostname)" ]];then 
#         ssh_cmd="ssh -q ${1} module load Singularity/${EBVERSIONSINGULARITY};"
#     else
#         ssh_cmd=""
#     fi
#     #\e[<N>A
#     #mapfile -t instances_in_host < <($ssh_cmd singularity instance list | tail -n +2)  #|awk -v host="$(hostname)" '{printf "%12s %12s %12s %20s\n", $1, $2, host, $3}'" #|| find ${VDT_LOCKFILES}/*.${host}* -user ${USER} -exec rm ${verbose} -f {} \; &2>/dev/null
#     vecho "${1} instances: ${instances_in_host[$1]}"
    
#     # # Find and remove faulty lockfiles.
#     # if [[ "${#instances_in_host[@]}" -lt 1 ]];then 
#     #     vex find "$VDT_LOCKFILES" -type f -user "$(whoami)" -name "*${1}*" -delete
#     # else
#     #     for instance in "${instances_in_host[@]}";do    
#     #         # Compare values of lockfile with actual instance 
#     #         read -ra _instance_array <<< "$instance"
#     #         vecho "Instance ${_instance_array[*]}"
#     #         vecho "key:${_instance_array[0]} -> value:${_lockfile_list[${_instance_array[0]}]}"
#     #         if [[ ! -v ${_lockfile_list[${_instance_array[0]}]} ]]; then 
#     #             read -ra _lockfile_array <<< "${_lockfile_list[${_instance_array[0]}]}"
#     #             _instance_port="http://localhost:${_lockfile_array[2]}"
#     #             _lockfile_list[${_instance_array[0]}]="${_lockfile_array[0]} ${_lockfile_array[1]} ${_lockfile_array[2]} ${_instance_array[1]} ${_instance_array[2]}"
#     #         else
#     #             vecho "${_instance_array[0]} has no lockfile."
#     #             _instance_port="NOLOCK"
#     #         fi
#     #         printf "%28s %-20s %-18s %-40s\n" "${_instance_array[0]} " "   ${1}" "${_instance_array[1]}" "${_instance_port}"  
#     #         # "${_instance_array[2]}"ls
#     #     done 
#     # fi
#     # Loop back through and delete all lockfiles that didn't have an associated instance.
#     for lockfle in "${_lockfile_list[@]}";do if [[ "${lockfle:(-4)}" == "DEAD" ]];then rm -vf "${VDT_LOCKFILES}"/"${lockfle%% *}".*; fi done
}

main() {
    parse_input "$@"
    initialize
    list_vnc "$@"
}
vecho () {
    # For verbose print.
    if [[ $verbose ]]; then
        echo "$LINENO:$*"
    fi
}

vex () {
    # For verbose print.
    if [[ $verbose ]]; then
        echo "$LINENO:$*"
    fi
    $@
}
main "$@"

